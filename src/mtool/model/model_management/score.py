import os 
import warnings
import pandas as pd
#from sklearn.externals 
import joblib
from keras.models import load_model
import tensorflow as tf

# code from mtool_model_score.py
from numpy import array
from keras.preprocessing.sequence import pad_sequences


def pad_sequence(sequence, length, value=None):
    if len(sequence) <= length:
        padded = pad_sequences([sequence], maxlen=length, dtype=object, value=value)
        return padded[0].tolist()
    else:
        return sequence


def one_hot_encode(sequence, ohe):
    encoded = ohe.transform(array(sequence).reshape(len(sequence), 1))
    return encoded


def generate_features(sequence, length, ohe):
    padded = pad_sequence(sequence, length)
    encoded = one_hot_encode(padded, ohe)  # TODO: possible to avoid ohe with tensorflow?

    features = ohe.categories_[0]
    n_features = len(features)

    # reshape sequence to be 3D
    x = encoded[-length:].reshape((1, length, n_features))

    return x


def predict(seq):
    """
    mtool model-based prediction
   
    Generated by: `SQL Server Big Data Cluster`
   
    :param seq: The sequence of notebooks run in a scene.
    :type seq: str array
    :return: The probability of the notebooks to be run next.
    """
    tf.logging.set_verbosity(tf.logging.ERROR)
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' 
    print(seq)
    os.chdir(os.path.dirname(__file__))
    print(os.getcwd())

    ohe_file = 'onehot_encoder.pkl'
    ohe = joblib.load(ohe_file)

    model_file = 'lstm_model.h5'
    model = load_model(model_file)

    _, n_steps, n_features = model.input_shape
    x = generate_features(seq, n_steps, ohe)
    yhat_proba = model.predict(x)
    series = pd.Series(yhat_proba[0], index=pd.Index(ohe.categories_[0], name='notebook'), name='probability')
    series_sorted = series.sort_values(ascending=False)
    score = series_sorted.reset_index()

    print(score)
    return score


if __name__ == '__main__':
    predict(['SOP023', 'SOP023', 'SOP023'])
